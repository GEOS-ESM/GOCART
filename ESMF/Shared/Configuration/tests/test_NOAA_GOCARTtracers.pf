#include "MAPL_Generic.h"

module test_NOAA_GOCARTtracers
   use, intrinsic :: iso_fortran_env, only: INT64, REAL32, REAL64

   use NOAA_TracerMap_mod
   use NOAA_GOCARTtracers_mod
   use pFUnit
   use MAPL
   use ESMF
   use ESMF_TestCase_mod
   use ESMF_TestMethod_mod

   implicit none

   integer,             parameter :: t_dim = 20
   integer(kind=INT64), parameter :: l_dim = 10
   character(*),        parameter :: test_rc = "test_GOCART_Tracers.rc"

contains
   subroutine create_config(config, rc)
      type(ESMF_Config), intent(out) :: config
      integer, optional, intent(out) :: rc

      integer :: status

      config = ESMF_ConfigCreate(rc=status)
      @assert_that(status, is(equal_to(0)))

      call ESMF_ConfigLoadFile(config, test_rc, rc=status)
      @assert_that(status, is(equal_to(0)))

      _RETURN(_SUCCESS)
   end subroutine create_config

   function str(x)
      character(:), allocatable :: str
      integer, intent(in) :: x

      character(32) :: buffer

      write(buffer,'(g0)') x
      str = trim(buffer)
   end function str

   subroutine create_mass_tracers(GOCART_tracers, field, f_array, t_array, rc)
      type(GOCARTtracers),                                intent(out) :: GOCART_tracers
      type(ESMF_Field),                                   intent(out) :: field
      real(kind=REAL32), allocatable, dimension(:,:,:,:), intent(out) :: f_array,t_array
      integer, optional,                                  intent(out) :: rc

      type(ESMF_Grid)     :: grid
      type(ESMF_DistGrid) :: dist_grid

      real(kind=REAL32)     :: f_array_val
      integer, dimension(3) :: fa_shape
      integer               :: x_dim, y_dim, z_dim, i, j, k, l, status, field_rank

      x_dim = 4
      y_dim = 3
      z_dim = 2

      dist_grid = ESMF_DistGridCreate(minIndex=[1,1,1], maxIndex=[x_dim,y_dim,z_dim], &
            regDecomp=[1,1,1], rc=status)
      @assert_that(status, is(equal_to(0)))

      grid = ESMF_GridCreate(distgrid=dist_grid, name="grid", rc=status)
      @assert_that(status, is(equal_to(0)))

      call ESMF_GridGetFieldBounds(grid=grid, localDe=0, &
            staggerloc=ESMF_STAGGERLOC_CENTER, totalCount=fa_shape, rc=status)
      @assert_that(status, is(equal_to(0)))

      @assert_that(fa_shape(1), is(equal_to(x_dim)))
      @assert_that(fa_shape(2), is(equal_to(y_dim)))
      @assert_that(fa_shape(3), is(equal_to(z_dim)))

      allocate(f_array(fa_shape(1),fa_shape(2),fa_shape(3), t_dim))
      allocate(t_array(fa_shape(1),fa_shape(2),fa_shape(3), t_dim))

      f_array_val = 1.0
      do i=1, fa_shape(1)
         do j=1, fa_shape(2)
            do k=1, fa_shape(3)
               do l=1, t_dim
                  f_array(i,j,k,l) = f_array_val
                  f_array_val = f_array_val + 1.0
               end do
            end do
         end do
      end do

      @assert_that(f_array_val, is(equal_to(fa_shape(1)*fa_shape(2)*fa_shape(3)*t_dim + 1.0)))
      t_array = f_array
      @assertEqual(f_array, t_array)

      field = ESMF_FieldCreate(grid, f_array, ESMF_INDEX_DELOCAL, &
            ungriddedLBound=[1], ungriddedUbound=[t_dim], rc=status)
      @assert_that(status, is(equal_to(0)))

      call ESMF_FieldGet(field, rank=field_rank, rc=status)
      @assert_that(status, is(equal_to(0)))

      @assert_that(field_rank, is(equal_to(4)))

      do i=1, t_dim
         call GOCART_tracers%tracer_map%tracer_map%insert("tracer"//str(i), i)
         if (i <= l_dim) call GOCART_tracers%GOCART_tracers%push_back("tracer"//str(i))
      end do

      _RETURN(_SUCCESS)
   end subroutine create_mass_tracers

   subroutine check_tracer(field, tracer, tracer_name, f_array, t_array, idx)
      type(ESMF_Field),                      intent(in) :: field, tracer
      character(*),                          intent(in) :: tracer_name
      real(kind=REAL32), dimension(:,:,:,:), intent(in) :: f_array, t_array
      integer,                               intent(in) :: idx

      type(ESMF_Grid)            :: field_grid, tracer_grid
      real(kind=REAL32), pointer :: tracer_array(:,:,:)
      character(len=ESMF_MaxStr) :: name
      integer                    :: status

      call ESMF_FieldGet(field, grid=field_grid, rc=status)
      @assert_that(status, is(equal_to(0)))
      call ESMF_FieldGet(tracer, grid=tracer_grid, name=name, rc=status)
      @assert_that(status, is(equal_to(0)))

      @assert_that(field_grid == tracer_grid, is(true()))
      @assert_that(tracer_name, is(equal_to(trim(name))))

      call ESMF_FieldGet(tracer, localDE=0, farrayPtr=tracer_array, rc=status)
      @assert_that(status, is(equal_to(0)))

      @assert_that(tracer_array, is(equal_to(f_array(:,:,:,idx))))
      @assert_that(tracer_array, is(equal_to(t_array(:,:,:,idx))))
   end subroutine check_tracer

   subroutine check_tracer_bundle(GOCART_tracers, bundle, field, f_array, t_array, idx)
      type(GOCARTtracers),                   intent(in) :: GOCART_tracers
      type(ESMF_FieldBundle),                intent(in) :: bundle
      type(ESMF_Field),                      intent(in) :: field
      real(kind=REAL32), dimension(:,:,:,:), intent(in) :: f_array, t_array
      integer,                               intent(in) :: idx

      type(ESMF_Field)          :: tracer
      character(:), allocatable :: name
      integer                   :: status

      name = GOCART_tracers%GOCART_tracers%at(idx)

      call ESMF_FieldBundleGet(bundle, fieldName=name, field=tracer, rc=status)
      @assert_that(status, is(equal_to(0)))

      call check_tracer(field, tracer, name, f_array, t_array, idx)
   end subroutine check_tracer_bundle

   @test
   subroutine test_read_file_name_from_config()
      type(GOCARTtracers) :: GOCART_tracers
      type(ESMF_Config)   :: config

      character(:), allocatable :: filename
      integer                   :: rc

      call create_config(config, rc)
      @assert_that(rc, is(equal_to(0)))

      call GOCART_tracers%read_filename_from_config(config, filename, rc)
      @assert_that(rc, is(equal_to(0)))
      @assert_that(filename, is(equal_to('GOCART_Tracers.yaml')))
   end subroutine test_read_file_name_from_config

   @test
   subroutine test_parse_yaml()
      type(GOCARTtracers) :: GOCART_tracers

      @assert_that(GOCART_tracers%GOCART_tracers%size(), is(equal_to(0_INT64)))
      @assert_that(GOCART_tracers%tracer_map%tracer_map%size(), is(equal_to(0_INT64)))
      call GOCART_tracers%parse_yaml('GOCART_Tracers.yaml')
      @assert_that(GOCART_tracers%GOCART_tracers%size(), is(equal_to(28_INT64)))
      @assert_that(GOCART_tracers%tracer_map%tracer_map%size(), is(equal_to(28_INT64)))

      @assert_that(GOCART_tracers%GOCART_tracers%at( 1), is(equal_to('sphum')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 2), is(equal_to('liq_wat')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 3), is(equal_to('rainwat')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 4), is(equal_to('ice_wat')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 5), is(equal_to('snowwat')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 6), is(equal_to('graupel')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 7), is(equal_to('o3mr')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 8), is(equal_to('so2')))
      @assert_that(GOCART_tracers%GOCART_tracers%at( 9), is(equal_to('sulf')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(10), is(equal_to('DMS')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(11), is(equal_to('msa')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(12), is(equal_to('pp25')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(13), is(equal_to('bc1')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(14), is(equal_to('bc2')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(15), is(equal_to('oc1')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(16), is(equal_to('oc2')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(17), is(equal_to('dust1')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(18), is(equal_to('dust2')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(19), is(equal_to('dust3')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(20), is(equal_to('dust4')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(21), is(equal_to('dust5')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(22), is(equal_to('seas1')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(23), is(equal_to('seas2')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(24), is(equal_to('seas3')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(25), is(equal_to('seas4')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(26), is(equal_to('seas5')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(27), is(equal_to('pp10')))
      @assert_that(GOCART_tracers%GOCART_tracers%at(28), is(equal_to('cld_amt')))
   end subroutine test_parse_yaml

   @test
   subroutine test_initialize()
      type(GOCARTtracers) :: GOCART_tracers
      type(ESMF_Config)   :: config

      integer :: rc

      call create_config(config, rc)
      @assert_that(rc, is(equal_to(0)))

      @assert_that(GOCART_tracers%GOCART_tracers%size(), is(equal_to(0_INT64)))
      @assert_that(GOCART_tracers%tracer_map%tracer_map%size(), is(equal_to(0_INT64)))
      call GOCART_tracers%initialize(config, rc)
      @assert_that(rc, is(equal_to(0)))
      @assert_that(GOCART_tracers%GOCART_tracers%size(), is(equal_to(28_INT64)))
      @assert_that(GOCART_tracers%tracer_map%tracer_map%size(), is(equal_to(28_INT64)))
   end subroutine test_initialize

   @test
   subroutine test_create_tracer_bundle()
      type(GOCARTtracers)                                :: GOCART_tracers
      type(ESMF_Field)                                   :: field
      type(ESMF_FieldBundle)                             :: bundle
      real(kind=REAL32), allocatable, dimension(:,:,:,:) :: f_array, t_array

      character(len=ESMF_MaxStr) :: name
      integer                    :: rc, field_count, i

      call create_mass_tracers(GOCART_tracers, field, f_array, t_array, rc)
      @assert_that(rc, is(equal_to(0)))

      @assert_that(GOCART_tracers%GOCART_tracers%size(), is(equal_to(l_dim)))

      call GOCART_tracers%create_tracer_bundle(field, bundle, rc)
      @assert_that(rc, is(equal_to(0)))

      call ESMF_FieldBundleGet(bundle, name=name, fieldCount=field_count, rc=rc)
      @assert_that(rc, is(equal_to(0)))

!      @assert_that(trim(name), is(equal_to('inst_mass_tracers')))
      @assert_that(trim(name) == 'inst_mass_tracers', is(true()))

      @assert_that(field_count == GOCART_tracers%GOCART_tracers%size(), is(true()))
      do i=1, field_count
         call check_tracer_bundle(GOCART_tracers, bundle, field, f_array, t_array, i)
      end do
   end subroutine test_create_tracer_bundle
end module test_NOAA_GOCARTtracers
